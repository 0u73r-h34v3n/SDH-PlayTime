name: Create Release on Master Push

on:
  push:
    branches:
      - master

jobs:
  back_end_unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Test with pytest
        run: |
          pip install pytest
          pytest

  front_end_unit_tests:
    needs: back_end_unit_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun i

      - name: Testing
        run: bun test

  check_linting_types_and_formating:
    needs: front_end_unit_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: pnpm install

      - name: TypeScript Check
        run: pnpm tsc --noEmit

      - name: Check formatting
        run: pnpm biome format

      - name: Check linting
        run: pnpm biome lint

  create_release:
    needs: check_linting_types_and_formating
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases and upload assets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Get Package Version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Get Commit Hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Download Decky CLI
        run: |
          mkdir /tmp/decky-cli
          curl -L -o /tmp/decky-cli/decky "https://github.com/SteamDeckHomebrew/cli/releases/download/0.0.7/decky-linux-x86_64"
          chmod +x /tmp/decky-cli/decky
          echo "/tmp/decky-cli" >> $GITHUB_PATH

      - name: Build plugin
        run: |
          sudo $(which decky) plugin build -b -o /tmp/output -s directory $GITHUB_WORKSPACE
          sudo chown -R $(whoami) .

      - name: Unzip plugin
        run: |
          mkdir -p /tmp/artifacts
          unzip /tmp/output/SDH-PlayTime.zip -d /tmp/artifacts

      - name: Create Git Tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a "v${{ env.PACKAGE_VERSION }}" -m "Release v${{ env.PACKAGE_VERSION }}"
          git push origin "v${{ env.PACKAGE_VERSION }}"

      - name: Generate Changelog (Simple)
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "# Changes in v${{ env.PACKAGE_VERSION }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          git log --oneline --no-merges $(git describe --tags --abbrev=0)..HEAD | sed 's/^/- /' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          name: Release v${{ env.PACKAGE_VERSION }}
          body: ${{ env.CHANGELOG }}
          files: /tmp/artifacts/*

      - name: Notify Success
        run: |
          echo "âœ… Release v${{ env.PACKAGE_VERSION }} created successfully!"
