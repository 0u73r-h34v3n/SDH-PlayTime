name: Create PR File and Upload as Artifact

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  check_label:
    runs-on: ubuntu-latest
    outputs:
      has_label: ${{ steps.check.outputs.result }}
    steps:
      - name: Check for nightly-release label
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            return labels.some(label => label.name === 'nightly-release');

  back_end_unit_tests:
    if: needs.check_label.outputs.has_label == 'true'
    needs: check_label
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Test with pytest
        run: |
          pip install pytest
          pytest

  front_end_unit_tests:
    needs: back_end_unit_tests
    if: needs.check_label.outputs.has_label == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun i

      - name: Testing
        run: bun test

  check_linting_types_and_formating:
    if: needs.check_label.outputs.has_label == 'true'
    needs: front_end_unit_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: pnpm install

      - name: TypeScript Check
        run: pnpm tsc --noEmit

      - name: Check formatting
        run: pnpm biome format

      - name: Check linting
        run: pnpm biome lint

  create_merge_request_artifact:
    if: needs.check_label.outputs.has_label == 'true' && github.event.action != 'closed'
    needs: check_linting_types_and_formating
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Get Package Version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Get Commit Hash
        run: echo "COMMIT_HASH=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV

      - name: Build plugin
        run: pnpm build

      - name: Prepare bundle
        run: |
          rm -rf bundle
          mkdir -p bundle/SDH-PlayTime/dist bundle/SDH-PlayTime/py_modules
          cp plugin.json package.json main.py README.md LICENSE bundle/SDH-PlayTime/
          cp -R dist/* bundle/SDH-PlayTime/dist/ || true
          cp -R py_modules/* bundle/SDH-PlayTime/py_modules/ || true

      - name: Upload plugin build as artifact
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: SDH-PlayTime-MR${{ github.event.pull_request.number }}-${{ env.COMMIT_HASH }}
          path: ./bundle

      - name: Post comment with artifact URL
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Build artifact: [SDH-PlayTime-MR${{ github.event.pull_request.number }}-${{ env.COMMIT_HASH }}](${{ steps.artifact-upload-step.outputs.artifact-url }})
          edit-mode: replace

